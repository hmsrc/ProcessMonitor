#
# Configuration file sourced by check_procs.sh
# Defines, variables, email template and kill_log_mail function
#

# Variable definitions
USER_UID_MIN=999                                # only watch uids in this range
USER_UID_MAX=200000                             #
MAX_CPU=80                                      # percent cpu limits
MAX_MEMORY=25                                   # percent memory limit
BASE_DIR=/var/run/process_monitor               # where store history files
TEMPFILE=${BASE_DIR}/process_monitor.out        # ps output 
HISTFILE=${BASE_DIR}/process_monitor.history    # tracks multiple process violations
LOGFILE=/var/log/process_monitor                # actions logged to this file
REPLY_EMAIL=submit-ticket@yourgroup.com		# email notice reply-to address
FROM_EMAIL=name@yourgroup.com			# notice spoofed as coming from this address

#
# Template for notifiaction email sent to users
# _XXX_ replaced with sed in build_mail()
#
MAIL_TEMPLATE="Hello _NAME_,

A resource intensive process running under your _USER_ account on the  HPC cluster shell login server (_HOST_) has been terminated.

Date    : _DATE_
Command : _COMMAND_
PID     : _PID_
%Memory : _MEMORY_
%CPU    : _CPU_
Host    : _HOST_

Running processes like this directly on a shell login server represents an impact to all HPC users and is not permitted.  In the future, please do not run resource intensive processes directly on an HPC cluster shell login server.  Instead, submit resource intensive jobs to compute nodes with LSF.  See this link for more information:

https://wiki.yourdomain.com/IntroductionToLSF

If you have questions regarding your terminated process, please reply to this message to request support.


Thank you,

--Name of your group
   http://link.yourgroup.com/
"


#
# kill violating process and send notice
#
function kill_log_mail {                    
    USER_STRING=$(getent passwd ${USER} | cut -f 1 -d ":")
    USER_NAME=$(getent passwd ${USER} | cut -f 5 -d ":")
    COMMAND=$(ps -o args ${PID} | grep -v COMMAND) 
    MAIL_BODY="User $USER_STRING using ${CPU}% cpu and ${MEMORY}% memory PID=${PID} COMMAND=${COMMAND}"
    MAIL_SUBJECT="Terminated CPU intensive process on $(hostname) ${USER_NAME} (${USER_STRING}) $(date +%Y%m%d)"
    echo "$(date): $MAIL_BODY" >> $LOGFILE

    # ignore rsync and sftp commands, add others to egrep command
    if [ "$(echo ${COMMAND} | egrep 'rsync|sftp-server|sshd')" == "" ] && [ "${COMMAND}" != "" ]; then
	kill ${PID} >> $LOGFILE
	sleep 1
	if [ ! -d /proc/${PID} ]; then
	    echo "$(date): Kill PID:${PID} Success" >> $LOGFILE
	else
	    kill -9 ${PID} >> $LOGFILE
            sleep 1
	    if [ ! -d /proc/${PID} ];then
		echo "$(date): Kill -9 PID:${PID} Success" >> $LOGFILE
	    else
		echo "$(date): Kill and Kill -9 PID:${PID} Failure" >> $LOGFILE
	    fi
	fi

	export replyto=${REPLY_EMAIL}
	export from=${FROM_EMAIL}
   	echo "$(build_mail)"  | mail -s "${MAIL_SUBJECT}" $USER_STRING
   else
        echo "$(date): Ignoring ${COMMAND} with PID:${PID}" >> $LOGFILE
   fi

}


#
# generate email text from stub message
#
function build_mail {

  # replace any special characters 
  SED_COMMAND=$(echo ${COMMAND} | sed 's/[\&/]/\\&/g')

  REPLY=$(echo "${MAIL_TEMPLATE}" | sed -e "s/_NAME_/${USER_NAME}/")
  REPLY=$(echo "$REPLY" | sed -e "s/_USER_/${USER_STRING}/" )
  REPLY=$(echo "$REPLY" | sed -e "s/_DATE_/$(date)/" )
  REPLY=$(echo "$REPLY" | sed "s/_COMMAND_/${SED_COMMAND}/" )
  REPLY=$(echo "$REPLY" | sed -e "s/_PID_/${PID}/" )
  REPLY=$(echo "$REPLY" | sed -e "s/_MEMORY_/${MEMORY}/" )
  REPLY=$(echo "$REPLY" | sed -e "s/_CPU_/${CPU}/" )
  REPLY=$(echo "$REPLY" | sed -e "s/_HOST_/$(hostname)/" )

  echo "${REPLY}"

}

